buildscript {
	repositories {
		mavenCentral()
		maven {
			url = "https://maven.minecraftforge.net"
		}
		maven {
    	name "Sponge"
    	url "https://repo.spongepowered.org/repository/maven-public/"
    	content {
    		includeGroup "org.spongepowered"
    	}
    }
	}
	dependencies {
		classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
		classpath group: "org.spongepowered", name: "mixingradle", version: "0.7-SNAPSHOT"
	}
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "eclipse"
apply plugin: "maven-publish"
apply plugin: "org.spongepowered.mixin"

////////////////

version = "1.0.0"
group = "agency.highlysuspect.incorporeal" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "incorporeal"

def botania_version = "1.16.5-419"
def patchouli_version = "1.16.4-51"
def curios_forge_version = "1.16.4-4.0.3.5"

////////////////

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println("Java: " + System.getProperty("java.version") + " JVM: " + System.getProperty("java.vm.version") + "(" + System.getProperty("java.vendor") + ") Arch: " + System.getProperty("os.arch")) //so true bestie

mixin {
	add sourceSets.main, "incorporeal.refmap.json"
}

minecraft {
	//mappings channel: "official", version: "1.16.5"
	mappings channel: "snapshot", version: "20201028-1.16.3" //same mappings Botania uses (MCP)
	
	// makeObfSourceJar = false
	
	// accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
	
	runs {
		client {
			workingDirectory project.file("run")
			
			property "forge.logging.console.level", "debug"
			property "fml.earlyprogresswindow", "false"
			//property "mixin.config", "incorporeal.mixins.json"
			property "mixin.env.remapRefMap", "true"
			property "mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg"
			
			mods {
				incorporeal {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file("run/server")
			
			property "forge.logging.console.level", "debug"
			//property "mixin.config", "incorporeal.mixins.json"
			property "mixin.env.remapRefMap", "true"
			property "mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg"
			
			mods {
				incorporeal {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file("run/data")
			
			property "forge.logging.console.level", "debug"
			property "fml.earlyprogresswindow", "false"
			//property "mixin.config", "incorporeal.mixins.json"
			property "mixin.env.remapRefMap", "true"
      property "mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg"
      			
			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args "--mod", "incorporeal", "--all",
				"--existing", file("src/main/resources/"),
				"--existing", file("src/generated/resources/"),
				"--output", file("src/generated/resources/")

			mods {
				incorporeal {
					source sourceSets.main
				}
			}
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources {
	srcDir "src/generated/resources"
}

repositories {
	maven {
		url "https://maven.blamejared.com"
		content {
			includeGroup "vazkii.botania"
			includeGroup "vazkii.patchouli"
		}
	}
	maven {
		url "https://maven.theillusivec4.top/"
		content {
			includeGroup "top.theillusivec4.curios"
		}
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:1.16.5-36.2.0"

	//u already know it baby
	implementation fg.deobf("vazkii.botania:Botania:${botania_version}")
	
	//patchy
	compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
	runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
	
	//curios
	compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_forge_version}:api")
	runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_forge_version}")
	
	//idk what the fuck this is
	if(System.getProperty("idea.sync.active") != true) {
		annotationProcessor "org.spongepowered:mixin:0.8.2:processor"
	}
}

jar {
	manifest {
		attributes([
			//what even is this shit
			"Specification-Title": project.name,
			"Specification-Version": "1",
			"Specification-Vendor": "quat",
			"Implementation-Title": project.name,
			"Implementation-Version": "${version}",
			"Implementation-Vendor": "quat",
			
			"MixinConnector": "agency.highlysuspect.incorporeal.IncMixinConnector"
		])
	}
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy("reobfJar") 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn("reobfJar")

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			url "file:///${project.projectDir}/mcmodsrepo"
		}
	}
}
